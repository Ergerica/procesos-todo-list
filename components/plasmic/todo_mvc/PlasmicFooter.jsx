// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vvEKhV4X4yWCLXhriishBU
// Component: gOFmOQ3PkTdLd
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import ToggleButton from "../../ToggleButton"; // plasmic-import: Vy5Rjsc6yec_k/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_todo_mvc.module.css"; // plasmic-import: vvEKhV4X4yWCLXhriishBU/projectcss
import * as sty from "./PlasmicFooter.module.css"; // plasmic-import: gOFmOQ3PkTdLd/css

export const PlasmicFooter__VariantProps = new Array("state");

export const PlasmicFooter__ArgProps = new Array("count");

function PlasmicFooter__RenderFunc(props) {
  const {
    variants,
    args,
    overrides,
    forNode,
    taskCount,
    onFilterChange,
    filter,
    onDelete,
  } = props;
  return (
    <div
      data-plasmic-name={"footerContainer"}
      data-plasmic-override={overrides.footerContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.footerContainer
      )}
    >
      {(
        hasVariant(variants, "state", "empty")
          ? false
          : hasVariant(variants, "state", "singularLeft")
          ? true
          : hasVariant(variants, "state", "hasCompleted")
          ? true
          : true
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.box__jeXc3, {
            [sty.box__state_empty__jeXc37Rw6L]: hasVariant(
              variants,
              "state",
              "empty"
            ),

            [sty.box__state_hasCompleted__jeXc3XsOq]: hasVariant(
              variants,
              "state",
              "hasCompleted"
            ),

            [sty.box__state_singularLeft__jeXc3HJygG]: hasVariant(
              variants,
              "state",
              "singularLeft"
            ),
          })}
        >
          <p.PlasmicSlot
            defaultContents={"0"}
            value={taskCount}
            className={classNames(sty.slotCount, {
              [sty.slotCount__state_hasCompleted]: hasVariant(
                variants,
                "state",
                "hasCompleted"
              ),

              [sty.slotCount__state_singularLeft]: hasVariant(
                variants,
                "state",
                "singularLeft"
              ),
            })}
          />

          {(hasVariant(variants, "state", "singularLeft") ? true : true) ? (
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__q34Qp,
                {
                  [sty.box__state_empty__q34Qp7Rw6L]: hasVariant(
                    variants,
                    "state",
                    "empty"
                  ),

                  [sty.box__state_hasCompleted__q34QpxsOq]: hasVariant(
                    variants,
                    "state",
                    "hasCompleted"
                  ),

                  [sty.box__state_singularLeft__q34QpHJygG]: hasVariant(
                    variants,
                    "state",
                    "singularLeft"
                  ),
                }
              )}
            >
              {hasVariant(variants, "state", "singularLeft")
                ? " item left"
                : " items left"}
            </div>
          ) : null}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__wQhrc)}
      >
        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__mybRd)}
          state={filter === "All" ? "selected" : undefined}
          onClick={() => onFilterChange("All")}
        >
          {"All"}
        </ToggleButton>

        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__xtSgh)}
          state={filter === "Completed" ? "selected" : undefined}
          onClick={() => onFilterChange("Completed")}
        >
          {"Completed"}
        </ToggleButton>

        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__rZywj)}
          state={filter === "Active" ? "selected" : undefined}
          onClick={() => onFilterChange("Active")}
        >
          {"Active"}
        </ToggleButton>
      </p.Stack>

      {(hasVariant(variants, "state", "hasCompleted") ? true : false) ? (
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__bBotT,
            {
              [sty.box__state_hasCompleted__bBotTxsOq]: hasVariant(
                variants,
                "state",
                "hasCompleted"
              ),
            }
          )}
          onClick={() => onDelete()}
        >
          {"Clear completed"}
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  footerContainer: ["footerContainer"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps,
    });

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
      taskCount: props.taskCount,
      onFilterChange: props.onFilterChange,
      filter: props.filter,
      onDelete: props.onDelete,
    });
  };
  if (nodeName === "footerContainer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footerContainer"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps,
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
