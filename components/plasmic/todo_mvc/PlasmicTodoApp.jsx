// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vvEKhV4X4yWCLXhriishBU
// Component: f7D0uKhHd0fWq
import * as React from "react";
import Head from "next/head";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: _0O6g5SMsT_vH/component
import Task from "../../Task"; // plasmic-import: SaqpK8Hg2PR3p/component
import Footer from "../../Footer"; // plasmic-import: gOFmOQ3PkTdLd/component
import { ThemeContext } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Po2-1Vqdro6aE/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_todo_mvc.module.css"; // plasmic-import: vvEKhV4X4yWCLXhriishBU/projectcss
import * as sty from "./PlasmicTodoApp.module.css"; // plasmic-import: f7D0uKhHd0fWq/css

export const PlasmicTodoApp__VariantProps = new Array("state");

export const PlasmicTodoApp__ArgProps = new Array();

/*
<Task
                    className={classNames("__wab_instance", sty.task__eNe9U, {
                      [sty.task__global_theme_dark__eNe9Ub5OmI]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      ),

                      [sty.task__state_empty__eNe9U3BGXu]: hasVariant(
                        variants,
                        "state",
                        "empty"
                      ),
                    })}
                  >
                    {"Some kind of text here"}
                  </Task>

                  <Task
                    className={classNames("__wab_instance", sty.task__sfdaa, {
                      [sty.task__global_theme_dark__sfdaaB5OmI]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      ),
                    })}
                    state={"editing"}
                  >
                    {"Some kind of text here"}
                  </Task>

                  <Task
                    className={classNames("__wab_instance", sty.task__ts4Oo)}
                    state={"checked"}
                  >
                    {"Some kind of text here"}
                  </Task>

                  <Task
                    className={classNames("__wab_instance", sty.task__tZ8JE)}
                  >
                    {"I have a task to do something that takes a long time"}
                  </Task>

*/
/**
() => {
  const newTasks = [...tasks];
  const changes = newTasks.find((t) => t === task);

  const index = array.indexOf({ changes });
  if (index > -1) {
    tasks.splice(index, 1);
  }

  setTasks([...newTasks]);
}
 */

function PlasmicTodoApp__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [tasks, setTasks] = React.useState([]);
  const [filter, setFilter] = React.useState("All");
  const globalVariants = ensureGlobalVariants({
    theme: React.useContext(ThemeContext),
  });

  const filteredTasks = tasks.filter((t) => {
    if (!t.completed && filter === "Active") {
      return true;
    }
    if (t.completed && filter === "Completed") {
      return true;
    }
    if (filter === "All") {
      return true;
    }
    return false;
  });
  const activeTasks = tasks.filter((t) => {
    if (!t.completed) {
      return true;
    }
    return false;
  });
  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
      </Head>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.root__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),

              [sty.root__state_empty]: hasVariant(variants, "state", "empty"),
            }
          )}
        >
          <div
            data-plasmic-name={"appTitle"}
            data-plasmic-override={overrides.appTitle}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.appTitle,
              {
                [sty.appTitle__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
              }
            )}
          >
            {" Proceso de software todos"}
          </div>

          <div
            className={classNames(defaultcss.all, sty.box__j1JsA, {
              [sty.box__global_theme_dark__j1JsAb5OmI]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
            })}
          >
            <div
              data-plasmic-name={"appBody"}
              data-plasmic-override={overrides.appBody}
              className={classNames(defaultcss.all, sty.appBody, {
                [sty.appBody__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
              })}
            >
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header, {
                  [sty.header__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  ),

                  [sty.header__state_empty]: hasVariant(
                    variants,
                    "state",
                    "empty"
                  ),
                })}
                state={
                  hasVariant(variants, "state", "empty") ? "empty" : undefined
                }
                onEnterTask={(task) => {
                  setTasks([
                    ...tasks,
                    {
                      id: tasks.length + 1,
                      completed: false,
                      value: task,
                    },
                  ]);
                }}
              />

              {(hasVariant(variants, "state", "empty") ? false : true) ? (
                <div
                  data-plasmic-name={"tasksContainer"}
                  data-plasmic-override={overrides.tasksContainer}
                  className={classNames(defaultcss.all, sty.tasksContainer, {
                    [sty.tasksContainer__state_empty]: hasVariant(
                      variants,
                      "state",
                      "empty"
                    ),
                  })}
                >
                  {filteredTasks.map((task) => {
                    return (
                      <Task
                        className={classNames(
                          "__wab_instance",
                          sty.task__tZ8JE
                        )}
                        state={task.completed ? "checked" : undefined}
                        onToggleTask={() => {
                          const newTasks = [...tasks];
                          const changes = newTasks.find(
                            (t) => t.id === task.id
                          );

                          changes.completed = !changes.completed;

                          setTasks([...newTasks]);
                        }}
                        onDelete={() => {
                          const newTasks = [...tasks];

                          const index = newTasks.findIndex(
                            (t) => t.id === task.id
                          );
                          if (index > -1) {
                            newTasks.splice(index, 1);
                          }
                          setTasks([...newTasks]);
                        }}
                      >
                        {task.value}
                      </Task>
                    );
                  })}
                </div>
              ) : null}
              {(hasVariant(variants, "state", "empty") ? false : true) ? (
                <Footer
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  className={classNames("__wab_instance", sty.footer, {
                    [sty.footer__state_empty]: hasVariant(
                      variants,
                      "state",
                      "empty"
                    ),
                  })}
                  taskCount={activeTasks.length}
                  state={["hasCompleted"]}
                  onFilterChange={(status) => setFilter(status)}
                  filter={filter}
                  onDelete={() => {
                    setTasks([...activeTasks]);
                  }}
                />
              ) : null}
            </div>

            {(hasVariant(variants, "state", "empty") ? false : true) ? (
              <div
                data-plasmic-name={"fakeStack"}
                data-plasmic-override={overrides.fakeStack}
                className={classNames(defaultcss.all, sty.fakeStack, {
                  [sty.fakeStack__state_empty]: hasVariant(
                    variants,
                    "state",
                    "empty"
                  ),
                })}
              >
                <div
                  className={classNames(defaultcss.all, sty.box___44BT, {
                    [sty.box__global_theme_dark___44BTB5OmI]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    ),
                  })}
                />

                <div
                  className={classNames(defaultcss.all, sty.box__yo1Gl, {
                    [sty.box__global_theme_dark__yo1GlB5OmI]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    ),
                  })}
                />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "appTitle",
    "appBody",
    "header",
    "tasksContainer",
    "footer",
    "fakeStack",
  ],

  appTitle: ["appTitle"],
  appBody: ["appBody", "header", "tasksContainer", "footer"],
  header: ["header"],
  tasksContainer: ["tasksContainer"],
  footer: ["footer"],
  fakeStack: ["fakeStack"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTodoApp__ArgProps,
      internalVariantPropNames: PlasmicTodoApp__VariantProps,
    });

    return PlasmicTodoApp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoApp";
  } else {
    func.displayName = `PlasmicTodoApp.${nodeName}`;
  }
  return func;
}

export const PlasmicTodoApp = Object.assign(
  // Top-level PlasmicTodoApp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appTitle: makeNodeComponent("appTitle"),
    appBody: makeNodeComponent("appBody"),
    header: makeNodeComponent("header"),
    tasksContainer: makeNodeComponent("tasksContainer"),
    footer: makeNodeComponent("footer"),
    fakeStack: makeNodeComponent("fakeStack"),
    // Metadata about props expected for PlasmicTodoApp
    internalVariantProps: PlasmicTodoApp__VariantProps,
    internalArgProps: PlasmicTodoApp__ArgProps,
  }
);

export default PlasmicTodoApp;
/* prettier-ignore-end */
